/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.*;
import spark.ModelAndView;
import spark.template.velocity.VelocityTemplateEngine;
import static spark.Spark.*;

public class App {
	public static void main(String[] args) {
		staticFileLocation("/public");
    	String layout = "templates/layout.vtl";

    	get("/", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("view", "templates/index.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	get("/admin", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("stylists", Stylist.getStylists());
    		model.put("view", "templates/admin.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route or getting a form for add a new stylist
    	get("/admin/new-stylist", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("view", "templates/add-stylist-form.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route to viw all stylist list
    	get("/admin/view-stylists", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("stylists", Stylist.getStylists());
    		model.put("view", "templates/view-stylists.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route to save the stylist data to the db
    	post("/admin/new-stylist", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		String fname = request.queryParams("fname");
    		String lname = request.queryParams("lname");
    		String code = request.queryParams("code");

    		Stylist newStylist = new Stylist(fname, lname, code);
    		newStylist.save();

    		// model.put("stylists", Stylist.getStylists());
    		String url = "/admin/view-stylists";
    		response.redirect(url);

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route to view all stylist of the company
    	get("/admin/view-stylist/:id", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		int id = Integer.parseInt(request.params(":id"));
    		model.put("stylist", Stylist.find(id));
    		model.put("view", "templates/stylist.vtl");
    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route or getting a form for add a new client
    	get("/admin/new-client", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("stylist", Stylist.getStylists());
    		model.put("view", "templates/add-client-form.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route or getting you to clients page
    	get("/admin/view-clients", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		model.put("clients", Clients.getClients());
    		model.put("view", "templates/view-clients.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route to save the clients data to the db
    	post("/admin/new-client", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();

    		String fname 	= request.queryParams("fname");
    		String lname 	= request.queryParams("lname");
    		int stylist 	= Integer.parseInt(request.queryParams("stylist"));

    		Clients newClient = new Clients(fname, lname, stylist);
    		newClient.save();

    		// model.put("stylists", Stylist.getStylists());
    		String url = "/admin/view-clients";
    		response.redirect(url);

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());

    	// a route directing you to a single user page
    	get("/admin/view-clients/:id", (request, response) -> {
    		Map<String, Object> model = new HashMap<String, Object>();
    		int id = Integer.parseInt(request.params(":id"));

    		// model.put("stylist", Stylist.find(Clients.getStylist()));
    		model.put("client", Clients.find(id));
    		model.put("view", "templates/client.vtl");

    		return new ModelAndView(model,layout);
    	}, new VelocityTemplateEngine());
    }
}